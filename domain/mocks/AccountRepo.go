// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "transaction-service/domain"

	mock "github.com/stretchr/testify/mock"
)

// AccountRepo is an autogenerated mock type for the AccountRepo type
type AccountRepo struct {
	mock.Mock
}

// CreateAccountRepo provides a mock function with given fields: ctx, acc
func (_m *AccountRepo) CreateAccountRepo(ctx context.Context, acc *domain.Account) error {
	ret := _m.Called(ctx, acc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Account) error); ok {
		r0 = rf(ctx, acc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DepositMoneyRepo provides a mock function with given fields: ctx, deposit
func (_m *AccountRepo) DepositMoneyRepo(ctx context.Context, deposit *domain.Deposit) error {
	ret := _m.Called(ctx, deposit)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Deposit) error); ok {
		r0 = rf(ctx, deposit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByIINRepo provides a mock function with given fields: ctx, iin
func (_m *AccountRepo) GetAccountByIINRepo(ctx context.Context, iin string) ([]domain.Account, error) {
	ret := _m.Called(ctx, iin)

	var r0 []domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Account); ok {
		r0 = rf(ctx, iin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, iin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByNumberRepo provides a mock function with given fields: ctx, number
func (_m *AccountRepo) GetAccountByNumberRepo(ctx context.Context, number string) (*domain.Account, error) {
	ret := _m.Called(ctx, number)

	var r0 *domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Account); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByUserIDRepo provides a mock function with given fields: ctx, userID
func (_m *AccountRepo) GetAccountByUserIDRepo(ctx context.Context, userID int64) (*domain.Account, error) {
	ret := _m.Called(ctx, userID)

	var r0 *domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Account); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAccountRepo provides a mock function with given fields: ctx
func (_m *AccountRepo) GetAllAccountRepo(ctx context.Context) ([]domain.Account, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Account
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferMoneyRepo provides a mock function with given fields: ctx, tr
func (_m *AccountRepo) TransferMoneyRepo(ctx context.Context, tr *domain.Transaction) error {
	ret := _m.Called(ctx, tr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Transaction) error); ok {
		r0 = rf(ctx, tr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
