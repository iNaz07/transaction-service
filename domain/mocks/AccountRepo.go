// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "transaction-service/domain"

	mock "github.com/stretchr/testify/mock"
)

// AccountRepo is an autogenerated mock type for the AccountRepo type
type AccountRepo struct {
	mock.Mock
}

// CreateAccountRepo provides a mock function with given fields: acc
func (_m *AccountRepo) CreateAccountRepo(acc *domain.Account) error {
	ret := _m.Called(acc)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Account) error); ok {
		r0 = rf(acc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccountRepo provides a mock function with given fields: iin
func (_m *AccountRepo) DeleteAccountRepo(iin string) error {
	ret := _m.Called(iin)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(iin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DepositMoneyRepo provides a mock function with given fields: deposit
func (_m *AccountRepo) DepositMoneyRepo(deposit *domain.Deposit) error {
	ret := _m.Called(deposit)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Deposit) error); ok {
		r0 = rf(deposit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByIINRepo provides a mock function with given fields: iin
func (_m *AccountRepo) GetAccountByIINRepo(iin string) ([]domain.Account, error) {
	ret := _m.Called(iin)

	var r0 []domain.Account
	if rf, ok := ret.Get(0).(func(string) []domain.Account); ok {
		r0 = rf(iin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(iin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByNumberRepo provides a mock function with given fields: number
func (_m *AccountRepo) GetAccountByNumberRepo(number string) (*domain.Account, error) {
	ret := _m.Called(number)

	var r0 *domain.Account
	if rf, ok := ret.Get(0).(func(string) *domain.Account); ok {
		r0 = rf(number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByUserIDRepo provides a mock function with given fields: userID
func (_m *AccountRepo) GetAccountByUserIDRepo(userID int64) (*domain.Account, error) {
	ret := _m.Called(userID)

	var r0 *domain.Account
	if rf, ok := ret.Get(0).(func(int64) *domain.Account); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAccountRepo provides a mock function with given fields:
func (_m *AccountRepo) GetAllAccountRepo() ([]domain.Account, error) {
	ret := _m.Called()

	var r0 []domain.Account
	if rf, ok := ret.Get(0).(func() []domain.Account); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferMoneyRepo provides a mock function with given fields: tr
func (_m *AccountRepo) TransferMoneyRepo(tr *domain.Transaction) error {
	ret := _m.Called(tr)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Transaction) error); ok {
		r0 = rf(tr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
