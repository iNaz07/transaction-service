// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "transaction-service/domain"

	mock "github.com/stretchr/testify/mock"
)

// AccountUsecase is an autogenerated mock type for the AccountUsecase type
type AccountUsecase struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: ctx, iin, userID
func (_m *AccountUsecase) CreateAccount(ctx context.Context, iin string, userID int64) error {
	ret := _m.Called(ctx, iin, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) error); ok {
		r0 = rf(ctx, iin, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DepositMoney provides a mock function with given fields: ctx, iin, number, balance
func (_m *AccountUsecase) DepositMoney(ctx context.Context, iin string, number string, balance string) error {
	ret := _m.Called(ctx, iin, number, balance)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, iin, number, balance)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountByIIN provides a mock function with given fields: ctx, iin
func (_m *AccountUsecase) GetAccountByIIN(ctx context.Context, iin string) ([]domain.Account, error) {
	ret := _m.Called(ctx, iin)

	var r0 []domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Account); ok {
		r0 = rf(ctx, iin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, iin)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByNumber provides a mock function with given fields: ctx, number
func (_m *AccountUsecase) GetAccountByNumber(ctx context.Context, number string) (*domain.Account, error) {
	ret := _m.Called(ctx, number)

	var r0 *domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Account); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByUserID provides a mock function with given fields: ctx, userID
func (_m *AccountUsecase) GetAccountByUserID(ctx context.Context, userID int64) (*domain.Account, error) {
	ret := _m.Called(ctx, userID)

	var r0 *domain.Account
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Account); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllAccount provides a mock function with given fields: ctx
func (_m *AccountUsecase) GetAllAccount(ctx context.Context) ([]domain.Account, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Account
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Account); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferMoney provides a mock function with given fields: ctx, senderAccNum, recipientACCNum, amount
func (_m *AccountUsecase) TransferMoney(ctx context.Context, senderAccNum string, recipientACCNum string, amount string) error {
	ret := _m.Called(ctx, senderAccNum, recipientACCNum, amount)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, senderAccNum, recipientACCNum, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
